package com.example.lightlogisticsapp.ui.stock

import android.content.Context
import android.text.Html
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.view.inputmethod.InputMethodManager
import android.widget.Button
import android.widget.EditText
import android.widget.TextView
import androidx.recyclerview.widget.DiffUtil
import androidx.recyclerview.widget.ListAdapter
import androidx.recyclerview.widget.RecyclerView
import com.example.lightlogisticsapp.R
import com.example.lightlogisticsapp.model.AbstractStock
import com.example.lightlogisticsapp.model.PerishableStock
import com.example.lightlogisticsapp.model.Stock

// Adapter for RecyclerView that displays the list of inventory/stock items on Stock screen
class StockAdapter(private val onUpdateQuantity: (AbstractStock<*>, Int) -> Unit) : ListAdapter<AbstractStock<*>, StockAdapter.StockViewHolder>(StockDiffCallback()) {

    // Auto generated by compiler: Inflates the layout for each item in RecyclerView
    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): StockViewHolder {
        val view = LayoutInflater.from(parent.context).inflate(R.layout.item_stock, parent, false)
        return StockViewHolder(view)
    }

    // Auto generated by compiler: Binds data to the RecyclerView
    override fun onBindViewHolder(holder: StockViewHolder, position: Int) {
        val stock = getItem(position)
        holder.bind(stock, onUpdateQuantity)
    }

    // Holds View for each stock item displayed in RecyclerView
    class StockViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {

        // Props
        private val stockInfo: TextView = itemView.findViewById(R.id.stock_info)
        private val perishableSticker: TextView = itemView.findViewById(R.id.perishable_sticker)
        private val editQuantity: EditText = itemView.findViewById(R.id.edit_quantity)
        private val updateButton: Button = itemView.findViewById(R.id.update_button)

        fun bind(stock: AbstractStock<*>, onUpdateQuantity: (AbstractStock<*>, Int) -> Unit) {
            // Corresponds to the string representation of the class
            val infoText = when (stock) {
                is PerishableStock -> "<b>Stock ID:</b> ${stock.id}, <b>Name:</b> ${stock.name}, \n" +
                        "<b>Quantity:</b> ${stock.quantity}, <b>Price:</b> ${stock.price}, <b>Expiration Date:</b> ${stock.expirationDate}"
                is Stock -> "<b>Stock ID:</b> ${stock.id}, <b>Name:</b> ${stock.name}, <b>Quantity:</b> ${stock.quantity}, <b>Price:</b> ${stock.price}"
                else -> "Unknown stock type"
            }
            // HTML to format the string and allow  for <b> tags
            stockInfo.text = Html.fromHtml(infoText, Html.FROM_HTML_MODE_LEGACY)

            // Show the perishable sticker if the stock is perishable
            perishableSticker.visibility = if (stock is PerishableStock) View.VISIBLE else View.GONE

            updateButton.setOnClickListener {
                val newQuantity = editQuantity.text.toString().toIntOrNull()
                if (newQuantity != null) {
                    onUpdateQuantity(stock, newQuantity)

                    // Hide keyboard
                    val imm = itemView.context.getSystemService(Context.INPUT_METHOD_SERVICE) as InputMethodManager
                    imm.hideSoftInputFromWindow(itemView.windowToken, 0)
                }
            }
        }
    }

    class StockDiffCallback : DiffUtil.ItemCallback<AbstractStock<*>>() {
        // Checks if two stock items have the same ID
        override fun areItemsTheSame(oldItem: AbstractStock<*>, newItem: AbstractStock<*>): Boolean {
            return oldItem.id == newItem.id
        }

        //Checks if two stock items have the same contents
        override fun areContentsTheSame(oldItem: AbstractStock<*>, newItem: AbstractStock<*>): Boolean {
            return oldItem == newItem
        }
    }
}